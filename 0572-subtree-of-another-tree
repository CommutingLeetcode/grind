# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        def isSameTree(p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
            if p is None and q is None:
                return True
            elif p is None and q is not None:
                return False
            elif p is not None and q is None:
                return False
            else:
                if p.val != q.val:
                    return False
            return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)
        
        if subRoot is None:
            return True
        if root is None:
            return False

        
        if root.val == subRoot.val:
            if isSameTree(root, subRoot):
                return True
            
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
        
        
'''
time complexity: O(n*m) where n is the number of nodes in root and m is the number of nodes in subRoot. Why? Because we're calling the isSameTree function which is O(m) time complexity, n times in the worst case scenario.

space complexity: O(log(n)) because n is likely to have the larger number of nodes, and the depth of the recursive call stack of root will be the space complexity.
'''
