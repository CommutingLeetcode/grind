# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        #base case, the node is a leaf node
        if (root is None):
            return 0
        return max(1 + self.maxDepth(root.left), 1 + self.maxDepth(root.right))
    
        #iterative DFS
        
'''
recursive dfs is easy, iterative bfs and dfs is also easy by using a queue and a stack respectively
O(n) time complexity
O(n) space complexity (height of the tree when it's unbalanced)
'''
        
        
